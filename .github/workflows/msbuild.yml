name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: mfcDuDownloadCodeGenerator.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        build_config:
          - vs2019_dynamic
          - vs2022_static

        include:
          - build_config: vs2019_dynamic
            os: windows-2019
            compiler: vs2019
            runtime_library: MultiThreadedDLL
            mfc: Dynamic
            platform: v142
            upx: false
          - build_config: vs2022_static
            os: windows-2022
            compiler: vs2022 
            runtime_library: MultiThreaded
            mfc: Static
            platform: v143
            upx: true

    runs-on: "${{ matrix.os }}"

    steps:
    - name: 🛎️ checkout
      uses: actions/checkout@v3

    - name: 🏭 prepare MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: 🏭 prepare msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          upx
          zip

    - name: 🔧 build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m `
          /p:PlatformToolset=${{ matrix.platform }} `
          /p:RuntimeLibrary=${{ matrix.runtime_library }} `
          /p:UseOfMfc=${{ matrix.mfc }} `
          /p:Configuration=${{env.BUILD_CONFIGURATION}} `
          ${{env.SOLUTION_FILE_PATH}}

    - name: 🗜️ upx?
      if: |
        ${{ matrix.upx }} == 'true'
      shell: msys2 {0}
      run: |
        upx -9 x64/Release/*.exe

    - name: 🗜️ archive binaries
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: x64/Release/*.exe

    - name: 📦 package for release
      shell: msys2 {0}
      run: |
        cd x64/Release
        zip -9 "../../ducode.$(git describe --abbrev=0).zip" *.exe

    - name: 📝 draft release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: "<to be filled>"
        draft: true
        # note you'll typically need to create a personal access token
        # with permissions to create releases in the other repo
        token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        files: |
          *.zip
